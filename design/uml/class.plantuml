@startuml MVVM_Class_Diagram_PySide6
title **MVVM Class Diagram (Detailed - Python/PySide6)**

class User {
}

' --- View ---
class View <<(V,LightBlue)>> {
  - _view_model : ViewModel
  + {method} display_data(data : Any)
  + {method} display_error(message : str)
  + {signal} user_action : Signal(str, Any)
  + {method} on_user_action(action : str, data : Any)  ' Emits the user_action signal
}

' --- ViewModel ---
class ViewModel <<(V,LightBlue)>> {
  - _model : Model
  - _data : Any  ' Data bound to the UI
  + {signal} data_changed : Signal(Any)
  + {signal} error_occurred: Signal(str)
  + {property} data : Any
  + {method} __init__(model : Model)
  + {method} handle_user_action(action : str, data: Any)
  + {slot} update_data(new_data : Any)  ' Called by Model
  + {slot} show_error(message : str)    ' Called by Model
}

' --- Model & Producer ---
class Model <<(M,LightCoral)>> {
  - _task_queue : Queue
  - _consumer_thread : QThread
  - _worker : Worker
  + {method} __init__()
  + {method} process_user_action_async(action : str, data : Any)
  + {method} on_task_completed(result : ResultObject)
  + {method} on_task_error(error : ErrorObject)
  + {method} stop()

}

' --- Worker (for QThread) ---
class Worker(QObject) {
    + {signal} task_completed: Signal(ResultObject)
    + {signal} task_error: Signal(ErrorObject)
    + {signal} finished: Signal()
    - _task_queue: Queue
    + {method} __init__(task_queue: Queue)
    + {slot} process_tasks()
    - {method} process_task(task : TaskItem) : ResultObject

}

' --- Task and Result Objects ---
class TaskItem {
  + action : str
  + data : Any
}

class ResultObject {
  + result_data : Any
}

class ErrorObject{
    + exception: Exception
    + message: str
}
' --- Relationships ---
User -- View : interacts with
View -- ViewModel : binds to, emits signals
ViewModel *-- Model : has a
Model o-- "1" Queue : uses
Model -- Worker: moves to QThread
Model *-- TaskItem: creates
Model *-- ResultObject : creates/receives
Model *-- ErrorObject: receives

Worker o-- "1" Queue: Uses
TaskItem -- ResultObject : may result in
TaskItem -- ErrorObject: May result in

note right of Model::__init__
    Creates and starts the QThread
    and moves the Worker to it.
end note

note right of Model::process_user_action_async
   This method is called
   asynchronously by the
   ViewModel.  It creates a
   TaskItem and adds it to
   the queue.
end note

note right of Worker::process_tasks
   This is the main loop running
    in a separate thread.
    It fetches tasks from _task_queue,
    processes them and emits signals
    for completion or errors.
end note

note "Queue is a thread-safe queue\nfrom the Python 'queue' module." as QueueNote
QueueNote .. Model

@enduml